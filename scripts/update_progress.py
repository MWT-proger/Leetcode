import os
import matplotlib.pyplot as plt

BASE_DIR = "problems"
PROGRESS_IMAGE = "progress.svg"
PROGRESS_FILE = "progress.md"

DIFFICULTY = {
    "easy": "üü¢ –õ—ë–≥–∫–∞—è",
    "medium": "üü† –°—Ä–µ–¥–Ω—è—è",
    "hard": "üî¥ –°–ª–æ–∂–Ω–∞—è",
}

COLORS = {"easy": "green", "medium": "orange", "hard": "red"}


def scan_solved_tasks():
    """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —Ä–µ—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á."""
    solved_counts = {level: 0 for level in DIFFICULTY}
    total_counts = {level: 0 for level in DIFFICULTY}

    for difficulty in DIFFICULTY:
        difficulty_path = os.path.join(BASE_DIR, difficulty)
        if os.path.exists(difficulty_path):
            for problem in os.listdir(difficulty_path):
                problem_path = os.path.join(difficulty_path, problem)
                if os.path.isdir(problem_path) and os.path.exists(
                    os.path.join(problem_path, "README.md")
                ):
                    total_counts[difficulty] += 1
                    if os.path.exists(os.path.join(problem_path, "solution.py")):
                        solved_counts[difficulty] += 1

    return solved_counts, total_counts


def generate_progress_svg():
    """–°–æ–∑–¥–∞—ë—Ç SVG-–≥—Ä–∞—Ñ–∏–∫ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    solved_counts, total_counts = scan_solved_tasks()

    total_solved = sum(solved_counts.values())
    total_problems = sum(total_counts.values())

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    total_progress = (total_solved / total_problems) * 100 if total_problems > 0 else 0

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∑–≤–µ—à–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ —É—Ä–æ–≤–Ω—è–º
    weighted_progress = {
        level: (
            (
                (solved_counts[level] / total_counts[level])
                * 100
                * (total_counts[level] / total_problems)
            )
            if total_counts[level] > 0
            else 0
        )
        for level in DIFFICULTY
    }

    # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(8, 2))
    plt.barh(
        list(DIFFICULTY.keys()),
        [weighted_progress[level] for level in DIFFICULTY],
        color=[COLORS[level] for level in DIFFICULTY],
    )

    plt.xlim(0, 100)
    plt.xlabel("–ü—Ä–æ–≥—Ä–µ—Å—Å (%)")
    plt.title(f"–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {total_progress:.2f}%")
    plt.savefig(PROGRESS_IMAGE, format="svg")

    print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ progress.svg –æ–±–Ω–æ–≤–ª—ë–Ω!")


def generate_progress_md():
    """–°–æ–∑–¥–∞—ë—Ç —Ñ–∞–π–ª progress.md —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø–æ —Ä–µ—à—ë–Ω–Ω—ã–º –∑–∞–¥–∞—á–∞–º."""
    solved_counts, total_counts = scan_solved_tasks()

    total_solved = sum(solved_counts.values())
    total_problems = sum(total_counts.values())

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    total_progress = (total_solved / total_problems) * 100 if total_problems > 0 else 0

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É—Ä–æ–≤–Ω—è–º
    progress_per_difficulty = {
        level: (
            (solved_counts[level] / total_counts[level]) * 100
            if total_counts[level] > 0
            else 0
        )
        for level in DIFFICULTY
    }

    with open(PROGRESS_FILE, "w", encoding="utf-8") as f:
        f.write("# üìä –ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ—à–µ–Ω–∏–π\n\n")
        f.write(
            f"**–ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–µ—à–µ–Ω–∏–π: {total_solved}/{total_problems} ({total_progress:.2f}%)**\n\n"
        )
        f.write("![LeetCode Progress](progress.svg)\n\n")

        # –¢–∞–±–ª–∏—Ü–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –ø–æ —É—Ä–æ–≤–Ω—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        f.write("| –£—Ä–æ–≤–µ–Ω—å  | –í—Å–µ–≥–æ –∑–∞–¥–∞—á | –†–µ—à–µ–Ω–æ | –ü—Ä–æ–≥—Ä–µ—Å—Å |\n")
        f.write("|---------|------------|--------|----------|\n")
        for level in DIFFICULTY:
            f.write(
                f"| {DIFFICULTY[level]} | {total_counts[level]} | {solved_counts[level]} | {progress_per_difficulty[level]:.2f}% |\n"
            )

        f.write("\n## üìå –†–µ—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏\n")
        f.write("| #  | –ó–∞–¥–∞—á–∞       | –£—Ä–æ–≤–µ–Ω—å | –†–µ—à–µ–Ω–æ |\n")
        f.write("|----|-------------|---------|--------|\n")

        task_index = 1
        for level in DIFFICULTY:
            difficulty_path = os.path.join(BASE_DIR, level)
            if os.path.exists(difficulty_path):
                for problem in sorted(
                    os.listdir(difficulty_path)
                ):  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
                    problem_path = os.path.join(difficulty_path, problem)
                    if os.path.isdir(problem_path) and os.path.exists(
                        os.path.join(problem_path, "solution.py")
                    ):
                        problem_title = problem.replace("-", " ").title()
                        problem_link = f"problems/{level}/{problem}/README.md"
                        f.write(
                            f"| {task_index} | [{problem_title}]({problem_link}) | {DIFFICULTY[level]} | ‚úÖ |\n"
                        )
                        task_index += 1

    print("‚úÖ –§–∞–π–ª progress.md –æ–±–Ω–æ–≤–ª—ë–Ω!")


if __name__ == "__main__":
    generate_progress_svg()
    generate_progress_md()
